from PyQt5.QtWidgets import *
from urllib.request import urlopen
from bs4 import BeautifulSoup
import sys, requests, time,re,lxml
import urllib.request
def download(url,address='./歌单音乐'):
    headers = {
        'Host': 'music.163.com',
        'Origin': 'https://music.163.com',
        'Referer': 'https://music.163.com/song?id=28793052',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64;x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'
    }

    play_url = "https://music.163.com"+url
    s = requests.session()
    response = s.get(play_url, headers=headers).content
    print(response)
    s = BeautifulSoup(response, 'lxml')
    main = s.find('ul', {'class': 'f-hide'})
    print(main)
    lists = []
    print(main.find_all('a'))
    for music in main.find_all('a'):
        print('{}:{}'.format(music.text, music['href']))

        list = []

        musicUrl = 'http://music.163.com/song/media/outer/url' + music['href'][5:] + '.mp3'
        musicName = music.text

        # 全部歌曲的信息都放在list变量里面
        list.append(musicName)
        list.append(musicUrl)

        # 全部歌曲的信息放在Lists里面
        lists.append(list)

    for i in lists:
        url = i[1]
        name = i[0]
        try:
            print("正在下载：", name)
            urllib.request.urlretrieve(url, address.rstrip('/')+'/'+str(name)+'.mp3')
            print("下载成功！")
        except:
            print("下载失败!")

class cloudmusic(QWidget):
    def __init__(self,data):
        super().__init__()
        self.data=data
        self.num=len(list(data.keys()))
        self.initui()
    def initui(self):
        # 设置窗口标题
        self.setWindowTitle('网易云音乐歌单爬取')
        # 窗体布局--左半边--创建控件
        Function_label = QLabel('输入歌单url链接，可进行下载')
        url_label = QLabel('输入url链接:')
        self.url_input = QLineEdit(self)
        address_label = QLabel('下载地址为:')
        self.address_input = QLineEdit(self)
        ckeck_btn1 = QPushButton('下载', self)
        clear_btn1 = QPushButton('清空', self)

        # 窗体布局--左半边--局部控件布局
        grid1 = QGridLayout()
        grid1.setSpacing(8)
        grid1.addWidget(Function_label, 0, 0)
        grid1.addWidget(url_label, 1, 0, 1, 1)
        grid1.addWidget(self.url_input, 1, 1, 1, 3)
        grid1.addWidget(address_label, 2, 0, 1, 1)
        grid1.addWidget(self.address_input, 2, 1, 1, 3)
        grid1.addWidget(ckeck_btn1, 3, 1, 1, 1)
        grid1.addWidget(clear_btn1, 3, 2, 1, 1)
        # 窗体布局--右半部分--创建控件
        Function3_label = QLabel('查看已爬取的歌单url:')

        self.table = QTableWidget(self.num, 2)
        self.table.setHorizontalHeaderLabels(['歌单名', 'url链接'])
        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)

        # 窗体布局--右半部分--局部控件布局
        grid2 = QGridLayout()
        grid2.setSpacing(8)
        grid2.addWidget(Function3_label, 0, 0)
        grid2.addWidget(self.table, 1, 0)

        # 整合左右两部分空间布局
        box = QVBoxLayout()
        box.addLayout(grid1)
        box.addLayout(grid2)

        # 将最终布局添加到QWidget对象上
        self.setGeometry(400, 400, 900, 300)
        self.setLayout(box)

        # 填充表格原始数据
        row = 0
        for key, value in (self.data).items():
            url, list = QTableWidgetItem(key), QTableWidgetItem(value)
            self.table.setItem(row, 0, list)
            self.table.setItem(row, 1, url)
            row += 1
        #自动调整列宽
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # 设置按钮功能
        clear_btn1.clicked.connect(self.url_input.clear)
        clear_btn1.clicked.connect(self.address_input.clear)

        ckeck_btn1.clicked.connect(self.load)

        # 显示QWidget控件
        self.show()
    def load(self):
        url = self.url_input.text()
        address=self.address_input.text()
        if address=='':
            print('yes!')
            download(url)
        else:
            download(url,address)
        print('ok')

def start():#这个函数是进行一次寻找,寻找第一个歌单的内链网址
    first={}
    html = urlopen("https://music.163.com/discover")
    bsObj = BeautifulSoup(html, "html.parser")
    starturl=bsObj.findAll("a", {"class": "msk","href": re.compile('/playlist\?id=[0-9]+')})
    for i in starturl:
        first[i.attrs['href']]=i.attrs['title']
    return first

def pa(allurl,n=2):
    allurl2={}
    if not hasattr(pa, 'x'):
        pa.x=0
    if pa.x<n:
        for url in allurl.keys():
            html = urlopen("https://music.163.com" + url)
            bsObj = BeautifulSoup(html, "html.parser")
            for iurl in bsObj.findAll('a', {'class':'sname f-fs1 s-fc0',"href": re.compile('/playlist\?id=[0-9]+')}):
                #print(iurl.attrs["href"])
                #print(iurl.attrs["title"])
                if iurl.attrs["href"] not in allurl.keys():
                    allurl2[iurl.attrs["href"]]=iurl.attrs["title"]
        pa.x += 1
        allurl3=pa(allurl2,n)
        for i in allurl3.keys():
            if i not in allurl.keys():
                allurl[i]=allurl3[i]
        return allurl
    elif pa.x>=n:
        for url in allurl.keys():
            html = urlopen("https://music.163.com" + url)
            bsObj = BeautifulSoup(html, "html.parser")
            for iurl in bsObj.findAll('a', {'class':'sname f-fs1 s-fc0',"href": re.compile('/playlist\?id=[0-9]+')}):
                #print(iurl.attrs["href"])
                #print(iurl.attrs["title"])
                if iurl.attrs["href"] not in allurl.keys():
                    allurl2[iurl.attrs["href"]]=iurl.attrs["title"]
        return allurl2
if __name__=='__main__':
    data={}
    data=pa(start(),2)
    # 实例化app对象
    app = QApplication(sys.argv)
    # 实例化GUI程序对象
    library_visualization = cloudmusic(data)
    # 进入事件循环
    sys.exit(app.exec_())